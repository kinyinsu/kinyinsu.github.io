{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/11/12/hello-world/"},{"title":"分布式","text":"基于消息中间件的通信技术OMO 点对点 面向消息中间件：提供了一种分布式消息队列服务，使得节点之间可以实现基于消息的形式灵活的异步通信。 异步的含义 ​ 发送方可以在任意时刻发出消息不必等待接收方上线，不必等待发送成功 ​ 接收方不必以阻塞方式等待消息的到来 三种接收方式 ​ 阻塞方式 ​ 轮询模式 ｔｉｍｅｏｕｔ＝＝０ ​ 回调接收 异步 主动通知 URL - factory - connection - session queue consumer jms 访问各类消息队列中间件的api 面向接口编程： 先把接口商量好，定义一组interface，各自实现类，类实现接口。 MOM触发你的onMessage的调用 不是consumer调用 onMessage处理消息。 37行 pause， 运行：先启动消息中间件 activemq 队列也可以有多个消费者，但是，只有一个获取消息 拿了就没了 基于主题发布/订阅通信编程实例Publisher —-&gt;Topic—-&gt;subscriber URL—&gt;FACTORY—&gt;CONNECTION–&gt;SESSION–&gt;TOPIC 异步通信，可以减少系统响应时间，提高吞吐量 分布式节点之间的解耦 保证消息的可靠递交，中间件保证消息尽量可以交给接受者。 实现最终一致性 实现广播，组播和多对多通信","link":"/2019/11/12/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%974/"},{"title":"测试","text":"title:测试123456#include&lt;iostream&gt;using namespace std;int main(){ cout&lt;&lt;\"hello world\"&lt;&lt;endl;}","link":"/2019/11/12/%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"课程","slug":"课程","link":"/tags/%E8%AF%BE%E7%A8%8B/"}],"categories":[{"name":"记录","slug":"记录","link":"/categories/%E8%AE%B0%E5%BD%95/"}]}