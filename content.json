{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"最长回文字串","text":"","link":"/2019/11/24/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%97%E4%B8%B2/"},{"title":"DNA Consensus String, ACM/ICPC Seoul 2006, Uva1368","text":"寻找一组字符串对应的一个汉明距离总和最小的字符串。结果不唯一取字典序最小的解。ACGT。 Sample Input35 8TATGATACTAAGCTACAAAGATCCTGAGATACTAAGATGT4 10ACGTACGTACCCGTACGTAGGCGTACGTATTCGTACGTAA6 10ATGTTACCATAAGTTACGATAACAAAGCAAAAGTTACCTTAAGTTACCAATACTTACCAASample Out TAAGATAC7ACGTACGTAA6AAGTTACCAA12 123456789101112131415161718192021222324252627282930313233343536373839404142434445//4&lt;=m&lt;=50,4&lt;=n&lt;=1000#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;char info[70][1200];int n,m;const char ACGT[4]{'A','C','G','T'};int cnt[4];int main(){ int T; cin&gt;&gt;T; while(T--) { int hanming=0; cin&gt;&gt;n&gt;&gt;m; for(int i =0;i&lt;n;i++) scanf(\"%s\",info[i]); for(int i =0;i&lt;m;i++) { memset(cnt,0,sizeof(cnt)); for(int j =0;j &lt; n;j++) { if(info[j][i] =='A')cnt[0]++; else if(info[j][i]=='C')cnt[1]++; else if (info[j][i]=='G')cnt[2]++; else cnt[3]++; } int maxPos=0; for(int k=0;k&lt;4;k++) { if(cnt[k]&gt;cnt[maxPos]) maxPos = k; } hanming+=(n-cnt[maxPos]); info[n][i] = ACGT[maxPos]; } info[n][m] = '\\n'; info[n][m+1]='\\0'; printf(\"%s\",info[n]); printf(\"%d\\n\",hanming); }} ·只需要找到每列出现最多的字符即可，并且ACGT为优先级顺序。","link":"/2019/12/01/DNA%20Consensus%20String/"},{"title":"Hangman Judge, UVa 489","text":"1234567________________| / | |/ ⚪| / | \\| || / \\| &emsp;输入单词和玩家猜测，猜测最多错六次，否则lose；全部猜对win；放弃checked out;猜过的单词也算错误。 1.The contestant tries to solve puzzl eby guessing one letter at a time. 2.Every time a guess is correct, all the characters in the word that match the guess will be “turned over.” For example, if your guess is ‘o’ and the word is ‘book’,then both ‘o’s in the solution will be counted as ‘solved’. 3.Every time a wrong guess is made, a stroke will be added to the drawing of a hangman, which needs 7 strokes to complete. Each unique wrong guess only counts against the contestant once. Sample Input1cheesechese2cheeseabcdefg3cheeseabcdefgij-1Sample OutputRound 1You win.Round 2You chickened out.Round 3You lose. 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int chance;string game;string guess;void run(){ chance =6; for(unsigned int i = 0;i&lt;guess.size();i++) { if(chance&lt;0) break; char temp = guess[i]; if(game.find(temp,0)!=string::npos) { while(game.find(temp,0)!=string::npos) { game.erase(game.find(temp,0),1); } } else --chance; } if(game.empty())cout&lt;&lt;\"You win.\"&lt;&lt;endl; else if(chance&lt;0) cout&lt;&lt;\"You lose.\"&lt;&lt;endl; else cout&lt;&lt;\"You chickened out.\"&lt;&lt;endl;}int main(){ while(true) { int round; cin&gt;&gt;round; if(round==-1) return 0; cout&lt;&lt;\"Round \"&lt;&lt;round&lt;&lt;endl; cin&gt;&gt;game&gt;&gt;guess; run(); }}","link":"/2019/11/24/HangMan/"},{"title":"MolarMass","text":"An organic compound /ˈkɒmpaʊnd/ is any member of a large class of chemical compounds whose molecules contain carbon. The molar mass of an organic compound is the mass of one mole of the organic compound. The molar mass of an organic compound can be computed from the standard atomic weights of the elements. When an organic compound is given as a molecular formula, DR. CHON wants to find its molar mass. A molecular formula. The following table shows that the standard atomic weights for ‘C’, ‘H’, ‘O’, and ‘W’. Carbon Hydrogen Oxygen Nitrogen 12.01g/mol 1.008 g/mol 16.00 g/mol 14.01 g/mol Input T test cases. Output molar mass of the given molecular formula. Sample Input 4CC6H5OHNH2CH2COOHC12H22O11 Sample Output 12.01094.10875.070342.296 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;string&gt;#include &lt;iomanip&gt;int main(){ float moleMass[300]; moleMass['C']=12.01; moleMass['H']=1.008; moleMass['O']=16.00; moleMass['N']=14.01; std::string total(\"CHON\"); int T; std::cin&gt;&gt;T; while(T--) { std::string formula; float mass=0; char present_char; int num=0; std::cin&gt;&gt;formula; for(std::string::size_type i=0;i&lt;formula.size();++i) { if(i==0){ present_char = formula[i]; }//首位特殊 else if(total.find(formula[i])!=std::string::npos){//CHON之一 mass+=moleMass[present_char]*(num==0?1:num); present_char = formula[i]; num=0; } else{//数字 num = num*10+(formula[i]-'0'); } if(i==formula.size()-1)//末位特殊 mass+=moleMass[present_char]*(num==0?1:num); } std::cout.setf(std::ios::fixed); std::cout&lt;&lt;std::fixed&lt;&lt;std:: setprecision(3)&lt;&lt;mass&lt;&lt;std::endl; } return 0;} Solution 从左到右遍历字符串字符 如果当前字符是CNOH之一，则结算前面元素的molecular mass。并且更新当前元素，数量更新为0。 否则当前字符是数字，则更新num。 num的初始值设置为0，方便更新（*10+x），结算时候判断，如果num为0说明只有一个应该乘以1而不是num。 第一个字符和最后一个字符特殊处理。第一个字符无需判断，最后一个字符处理完结算。 Problem string.find()的返回值类型是string::size_type，查找失败返回的是string::npos。 cout 输出小数点后指定位数 1234567#include&lt;iomanip&gt;cout &lt;&lt; \"a=\" &lt;&lt; setprecision(2) &lt;&lt; a &lt;&lt;endl;//截断cout.setf(ios::fixed);cout &lt;&lt; \"a=\" &lt;&lt;fixed&lt;&lt; setprecision(2) &lt;&lt; a &lt;&lt;endl; //补零cout.unsetf(ios::fixed);cout &lt;&lt; \"a=\" &lt;&lt; setprecision(2) &lt;&lt; a &lt;&lt;endl; //","link":"/2019/11/13/MolarMass/"},{"title":"Periodic Strings,UVa455","text":"A character string is said to have period k if it can be formed by concatenating one or more repetitious of another string of length k. For example, the string “abcabcabcabc “ has perid 3, since it is formed by 4repetitions of the “abc”. It also has periods 6 and 12 . &emsp;Write a program to read a character and determine its smallest period. Input An first line of the input file will contain a single integer N indicting how many test case that your program will test followed by blank line. Each test case will contain a single character string of up to 80 non-blank characters. Two consecutive input will separated by a blank line. Output An integer denoting the smallest period of the input string for each input. Two consecutive output are separated by a blank line. Sample Input 1HoHoHo Sample Output 2 12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include&lt;string&gt;int main(){ int T; std::cin&gt;&gt;T; while(T--) { std::string line; std::cin&gt;&gt;line; for(int i =1; i&lt;=line.length();++i) { if(line.length()%i!=0) continue; else{ std::string temp =line.substr(0,i); std::string cmp(\"\"); for(int j =0;j&lt;line.length()/i;j++) cmp+=temp; if(line==cmp) { std::cout&lt;&lt;i&lt;&lt;std::endl; break; } } } }return 0;} &emsp; string.size(),string.length()没有实质区别，length()是从c语言中习惯传承的，string最开始只有length，后来STL引入，作为STL容器属性存在，便于符合STL接口规则。 环形串解法 &emsp;看成一个圆，圆转动多少位能复原即可得出解。 12345abcabcabc//原cabcabcab//右移一位bcabcabca//2位abcabcabc//3位置 解为3s[i]==s[(i+n)%size]; 123456789101112131415161718192021222324#include&lt;iostream&gt;#include&lt;string&gt;int main(){ int T; std::cin&gt;&gt;T; while(T--) { std::string line; std::cin&gt;&gt;line; int i=1; for(;i&lt;=line.size();i++) { bool flag = false; for(int j=0;j&lt;line.size();j++) if(line[j]!=line[(j+i)%line.size()]) flag=true; if(flag==false){ std::cout&lt;&lt;i&lt;&lt;std::endl; break; } } }return 0;}","link":"/2019/11/15/Uva455/"},{"title":"Digit Counting, UVa1225","text":"Trung takes a piece of chalk and starts writing a sequence of consecutive integers starting with 1 to N( 1&lt;N&lt;10000). After that,he counts the number of times each digit appears in the sequence. Input T and each number Output for each test case, write sequentially in one line the number of digit 0-9 separated by a space. Sample Input 2313 Sample Output 0 1 1 1 0 0 0 0 0 01 6 2 2 1 1 1 1 1 1 123456789101112131415161718192021222324252627282930313233#include&lt;iostream&gt;#include&lt;string&gt;int main(){ int T; std::cin&gt;&gt;T; while(T--) { int n; int digit=0; std::cin&gt;&gt;n; int total[10]={0,0,0,0,0,0,0,0,0,0}; for(int i =1;i&lt;=n;++i) { int x=i; while(x!=0) { digit = x%10; total[digit]++; x/=10; } } for(int i =0;i&lt;10;i++) { if(i!=9){ std::cout&lt;&lt;total[i]&lt;&lt;\" \"; } else std::cout&lt;&lt;total[i]&lt;&lt;std::endl; } }return 0;}","link":"/2019/11/14/DigitCounting/"},{"title":"puzzle,UVa227，world Finals 1993","text":"&emsp;The illustration below represents a puzzle in its original configuration and in its configuration after the following sequence of 6 moves: 1) The square above the empty position moves. 2) The square to the right of the empty position moves. 3) The square to the right of the empty position moves. 4) The square below the empty position moves. 5) The square below the empty position moves. 6) The square to the left of the empty position moves. 1234567----------- -----------|T|R|G|S|J| |T|R|G|S|J| |X|D|O|K|I| |X|O|K|L|I||M| |V|L|N| |M|D|V|B|N||W|P|A|B|E| |W|P| |A|E||U|Q|H|C|F| |U|Q|H|C|F|----------- ----------- Input Input for your program consists of several puzzles. Each is described by its initial configuration and the sequence of moves on the puzzle. The first 5 lines of each puzzle description are the starting configuration. Subsequent lines give the sequence of moves. Output Output for each puzzle begins with an appropriately labeled number(Puzzle #1,Puzzle #2, etc.). If the puzzle has no final configuration, then a message to the effect should follow. Otherwise that final configuration should be displayed. Sample Input TRGSJXDOKIM VLNWPABEUQHCFARRBBL0ABCDEFGHIJKLMNOPQRSTUVWXAAALLLL0ABCDEFGHIJKLMNOPQRSTUVWXAAAAABBRRRLL0ZSample OutputPuzzle #1:T R G S JX O K L IM D V B NW P A EU Q H C FPuzzle #2:A B C DF G H I EK L M N JP Q R S OT U V W XPuzzle #3:This puzzle has no final configuration. 注意输入输出格式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;char present;char puzzle[5][5];int dx,dy;void sswap(int m,int n){ char temp = puzzle[dx][dy]; puzzle[dx][dy]=puzzle[dx+m][dy+n]; puzzle[dx+m][dy+n]=temp; dx = dx+m;dy = dy+n;}int main(){ int num=0; while(true) { ++num; while(scanf(\"%c\",&amp;present)&amp;&amp;present=='\\n'); if(present=='Z')return 0; else{ if(num!=1)cout&lt;&lt;endl; for(int i =0;i&lt;5;i++) for(int j=0;j&lt;5;j++) { if(i==0&amp;&amp;j==0){ if(present==' '){dx=i;dy=j;} puzzle[i][j]=present; } else{ while(scanf(\"%c\",&amp;present)&amp;&amp;present=='\\n'); if(present==' '){dx=i;dy=j;} puzzle[i][j]=present; } } }//get the puzzle; bool isAns=true; while(true) { while(scanf(\"%c\",&amp;present)&amp;&amp;(present=='\\n'||present==' ')); if(present=='A'&amp;&amp;isAns) { if(dx!=0) { sswap(-1,0); } else{ isAns=false; cout&lt;&lt;\"Puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; cout&lt;&lt;\"This puzzle has no final configuration.\\n\"; } } else if(present=='B'&amp;&amp;isAns) { if(dx!=4) { sswap(1,0); } else{ isAns=false; cout&lt;&lt;\"Puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; cout&lt;&lt;\"This puzzle has no final configuration.\\n\"; } } else if(present=='R'&amp;&amp;isAns) { if(dy!=4) { sswap(0,1); } else{ isAns=false; cout&lt;&lt;\"Puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; cout&lt;&lt;\"This puzzle has no final configuration.\\n\"; } } else if(present=='L'&amp;&amp;isAns) { if(dy!=0) { sswap(0,-1); } else{ isAns=false; cout&lt;&lt;\"Puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; cout&lt;&lt;\"This puzzle has no final configuration.\\n\"; } } else if(present=='0') break; } if(isAns) { cout&lt;&lt;\"Puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; for(int i =0;i&lt;5;i++) { for(int j =0;j&lt;4;j++) cout&lt;&lt;puzzle[i][j]&lt;&lt;' '; cout&lt;&lt;puzzle[i][4]&lt;&lt;endl; } } }} while(scanf()&amp;&amp;())吃掉多余空格和回车。 输入不用担心puzzle部分有多余空格","link":"/2019/11/16/Puzzle/"},{"title":"11.3再谈迭代器","text":"&emsp;标准库所定义的迭代器不依赖于特定的容器。c++提供了另外三种迭代器。 插入迭代器：与容器绑定，实现在容器中插入元素的功能。 iostream迭代器：与输入或输出流绑定在一起，用于迭代遍历所关联的IO流。 反向迭代器：这类迭代器实现向后遍历，而不是向前遍历。所有容器类型都定义了自己的reverse_iterator类型，由rbegin和rend成员函数返回。 1.插入迭代器(迭代器适配器，容器参数-&gt;生成迭代器)：&emsp;back_inserter:创建使用push_back实现插入的迭代器。 &emsp;front_inserter,使用push_front实现插入//容器必须提供push_front操作 &emsp;inserter:使用inserter实现插入操作，除了关联容器外， +指向插入起始位置的迭代器。inserter函数总是在它的迭代器实参所标明的位置前面插入新元素。 12list&lt;int&gt;::iterator it = find(list.begin(),list.end(),42);replace_copy（ivec.begin(),ivec.end(),inserter(ilist,it),100,0); 2.iostream迭代器虽然iostream类型不是容器，但是提供了在iostream对象上使用迭代器。istream_iterator用于读取输入输出流，而ostream_iterator则用于写输出流。这些迭代器将它们所对应的流视为特定类型的元素序列。使用流迭代器,将流视为特定类型的元素的序列。 - - istream_iterator in(strm); 创建从输入流strm中读取T类型对象的istream_iterator对象 iostream_iterator in; isstream_iterator 对象的超出末端迭代器 ostream_iterator in(strm, delim);","link":"/2019/11/20/%E5%86%8D%E8%B0%88%E8%BF%AD%E4%BB%A3%E5%99%A8/"},{"title":"文字-汉字概说","text":"&emsp;文字是记录语言的书写符号系统，是最重要的辅助性交流工具。 &emsp;殷商的甲骨文，距现在有3000多年的历史了，从形体和造字法来看，甲骨文已经是相当成熟的文字，可以想到，汉字产生的时间比这更早，西安半坡遗址距今五六千年，遗址出土的彩陶上有一些重复出现的有规则的简单符号。 &emsp;仓颉造字的说法是不正确的，文字是为了满足日益复杂的交际的需要，由人类共同创造出来的，文字一般起源于图画。萌芽的原始文字是不成系统的，分散的，如果仓颉确有其人，他可能是搜集和整理汉字的名人之一。 &emsp;表音和表意:每种语言都有一个语音系统和一个词汇系统，前者由音素，音节组成，后者由语素，词构成。这四个要素都可以用符号来记录，记录音素，音节的叫音素文字，音节文字，合称为表音文字；记录语素，词，叫，语素文字，表词文字，可合称为表意文字。 &emsp;表音文字用数目不多的符号表示一种语言里有限的音素或音节，作为标记词语声音的字母，一般来说，一定的音就用一定的字母表示，一定的字母表示一定的音。人们掌握了字母的发音和拼写规则，听到了一个词的发音就能写出来，看到一个词一般能读出它所表示的语音。表意文字则相反，不是用几十个字母来记录语素和词中的几十个音和几百个音节，用成千上万个符号去表示或区别不同的语素，词的意义。 &emsp;汉字是表意体系的文字，汉族历史悠久，地域辽阔，方言分歧很大，表意体系的汉字能在不同历史时期，不同方言之间很好地起到交际工具的作用，增强了民族的凝聚力。 &emsp;世界上文字多属于表音文字，表音文字助于抽象思维，表意助于形象思维。 &emsp;","link":"/2019/11/14/%E6%96%87%E5%AD%97-%E6%B1%89%E5%AD%97%E6%A6%82%E8%AF%B4/"},{"title":"Crossword Answer","text":"&emsp; A crossword puzzle consists of a rectangular grid of black and white squares and two lists of definitions. 12345678______________________|1 |2 |3 |■ |4 |5 |6 ||■ |7 | |■ |8 | | ||9 | | |10|■ |11| ||12| |■ |13|14| | ||■ |15|16|■ |17| |■ ||18| | |■ |19| |20|—————————————————————— &emsp;You must write a program that takes several solved crossword puzzles as input and outputs the lists of across and down words which constitute the solutions. 起始格：左边是界外或者■， 或者上边是界外或者■，(可以扩展边界以便统一为■) Input Each puzzle solution in the input starts with a line containing two integers r and c. The r rows of input which follow each contain c characters which describe the solution. Each of those c characters is an alphabetic character which is part of a word or the character ‘*’, which indicates a black square. The end of input is indicated by a line consisting of the single number ‘0’. Output Output for each puzzle consists of an identifier for the puzzle and the list of across words followed by the list of down words. Words in each list must be output one-per-line in increasing order of the number of their corresponding definitions. The heading for the list of across words is ‘Across’. The heading for the list of down words is ‘Down’. In the case where the lists are empty, the ‘Across’ and ‘Down’ heading should still appear. Separate output for successive input puzzles by a blank line. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647Sample Input2 2AT*O6 7AIM*DEN*ME*ONEUPON*TOSO*ERIN*SA*OR*IES*DEA0Sample Outputpuzzle #1:Across1.AT3.ODown1.A2.TOpuzzle #2:Across1.AIM4.DEN7.ME8.ONE9.UPON11.TO12.SO13.ERIN15.SA17.OR18.IES19.DEADown1.A2.IMPOSE3.MEO4.DO5.ENTIRE6.NEON9.US10.NE14.ROD16.AS18.I20.A 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;char puzzle[20][20];int mark[20][20];int r,c;int num=0;void run();void run(){ cout&lt;&lt;\"puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; cout&lt;&lt;\"Across\"&lt;&lt;endl; for(int i =0;i&lt;r;++i) for(int j =0;j&lt;c;++j) { if(mark[i][j]!=-1) { if(j==0||j!=0&amp;&amp;mark[i][j-1]==-1) { cout&lt;&lt;\" \"&lt;&lt;mark[i][j]&lt;&lt;\".\"&lt;&lt;puzzle[i][j]; if(j==c-1)cout&lt;&lt;endl; } else if(j==c-1||j!=c-1&amp;&amp;mark[i][j+1]==-1) cout&lt;&lt;puzzle[i][j]&lt;&lt;endl; else cout&lt;&lt;puzzle[i][j]; } } cout&lt;&lt;\"Down\"&lt;&lt;endl; for(int i =0;i&lt;r;++i) for(int j=0;j&lt;c;++j){ if(mark[i][j]!=-1) { if(i==0 || i!=0&amp;&amp;mark[i-1][j]==-1) { cout&lt;&lt;\" \"&lt;&lt;mark[i][j]&lt;&lt;\".\"&lt;&lt;puzzle[i][j]; if(i==r-1) cout&lt;&lt;endl; for(int k=i+1;k&lt;r;++k) { if(mark[k][j]!=-1){ cout&lt;&lt;puzzle[k][j]; mark[k][j]=-1; if(k==r-1)cout&lt;&lt;endl; } else{cout&lt;&lt;endl;break;} } } } }}int main(){ while(true){ num++; cin&gt;&gt;r; if(r==0) return 0; cin&gt;&gt;c; int count=0; cout&lt;&lt;endl; for(int i =0;i&lt;r;i++) for(int j =0;j&lt;c;j++) { cin&gt;&gt;puzzle[i][j]; if(puzzle[i][j]!='*' &amp;&amp;(j!=0&amp;&amp;puzzle[i][j-1]=='*'|| j==0|| i!=0&amp;&amp;puzzle[i-1][j]=='*'|| i==0) ) mark[i][j]=++count; else if(puzzle[i][j]=='*') mark[i][j]=-1; else mark[i][j]=0; } run(); }} 获取棋盘的同时，获取起始格标记序号，另算上*(-1)所在位置一同记录在mark中。 输出时，遍历mark更加方便。","link":"/2019/11/17/crossword%20Answers/"},{"title":"11.2初窥算法","text":"算法永不执行容器提供的操作，泛型算法本身不执行容器的操作，只是单独依赖迭代器和迭代器操作实现，而非基于容器操作。 ·输入范围：出了少数例外，所有算法都在一段范围的元素上操作，这段范围称为 “input range”。此类算法前两个参数标记范围。 ·理解算法基本方法：理解是否读元素，是否写元素，或者对元素进行重新排序。 1.只读算法&emsp;只读取输入范围内的元素。ex: accumulate 1int sum = accumulate(vec.begin(), vec.end(),42); 指定第三个实参是必要的。 121.累加需要一个起始值。2.容器内的元素类型必须与第三个实参的类型匹配或者可以转换。 12string sum = accumulate(v.begin(),v.end(),string(\"\"));//实现了累加但是第三个参数不是字符串常量\"\"，因为string的加法操作数一个是string一个是const char* ex2: first_find_of//标记两段元素范围，在第一段范围内查找与第二段范围任意元素匹配的元素，返回迭代器。 2.写容器元素的算法&emsp;一些算法写入元素值，在使用这些算法写元素时当心，必须确保算法所写的序列至少足以存储要写入的元素。 写入输入序列的元素&emsp;写入到输入序列的算法本质上是安全的–只会写入与指定输入范围数量相同的元素。ex:fill 1fill(v.begin(), vec.begin() + vec.size() / 2, 10); 不检查写入操作的算法&emsp;fill_n: 迭代器+计数器+值； 对指定数目的元素做写入运算，或者写入目标迭代器的算法，都不检查目标的大小是否足以存储要写入的元素。 引入back_inserter&emsp;插入迭代器是可以给基础容器添加元素的迭代器。通常，用迭代器给容器元素赋值时，被赋值的是迭代器所指向的元素，插入迭代器会容器中添加一个元素，其值等于赋值运算的右操作数的值。 12vector&lt;int&gt; vec;fill_n(back_interator(vec),10,0); 写入到目标迭代器的算法&emsp;第三类算法向目标迭代器写入未知个数的元素，正如fill_n函数一样，目标迭代器指向存放输出数据的序列中第一个元素。ex: copy 12vector&lt;int&gt; ivec;copy(ilist.begin(),ilist.end(),back_iterter(ivec)); 3对容器元素重新排序的算法","link":"/2019/11/20/c++%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/"},{"title":"无重复字符的最长子串","text":"给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 输入: “pwwkew”输出: 3解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 Solution: &emsp;最直接的解决方式就是遍历所有字符串，并判断这个字符串是否有重复字符，复杂度应该为O(n^3) 123for(int i =0;i&lt;maxn;i++) for(int j=i+1;j&lt;maxn;j++) 判断字符串[i,j]是否有重复字符 &emsp;可以发现，如果说[i,j]有重复字符，那么没必要再判断[i,j+1]，也就是说，已经找到了以s[i]开头的字符串的最长子串长度。下一步应该查找s[i+1]开头的字串。break； &emsp;以滑动窗口来进一步简化： 12345比如字符串abbcddee初始窗口i=j=0;//加入a无重复，继续++ji=0,j=1 //如果加入b无重复，++j ans=j-s=2i=0,j=2 //如果加入b发现有重复，窗口右移,移除hash表中的s[i],i++i=1,j=2//以此类推 &emsp;对于字符串，最糟糕的情况下，每个字符将i和j访问两次。（添加j的时候访问一次，移除i的时候访问 一次）时间复杂度O(n)。 1234567891011121314151617181920class Solution {public: int lengthOfLongestSubstring(string s) { int i=0,j=0,n=s.size(); int ans=0; int hash[260]={0}; while(i&lt; n&amp;&amp;j&lt; n) { if(hash[s[j]]==0){ hash[s[j]]++; j++; ans = ans&gt;j-i? ans:j-i; } else{ hash[s[i++]]=0; } } return ans; }}; 进一步优化 比如acdbefbmn，当i为0，j为6时，可以直接令i=4，也就是跳过前面一段而不是一直++，那么hash表存储字符的位置即可。","link":"/2019/11/24/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"},{"title":"现代汉语概述-现代汉民族共同语","text":"&emsp;共同语是一个民族全体成员通用的语言。方言则是民族语言的地方分支。方言是共同语形成的基础，共同语形成后，两者可以同时存在。 &emsp;民族共同语是在一种方言的基础上形成的，这与经济、政治、文化分不开。这个民族共同语基础的方言叫基础方言。 &emsp;先秦时代存在着古代汉民的民族共同语。春秋时代，这种共同语称为“雅言”，汉代起称为“通语”，明代改称“官话”。到了现代，辛亥革命后，称为“国语”，新中国成立后称为“普通话”。 &emsp;汉民族的共同语的书面语在先秦时代产生，后来口语发展较快，书面语脱离了口语，通常称为文言或者文言文。到了唐宋时代，接近口语的书面语，白话产生了。唐宋以来用白话写作的各种文学作品很多，影响最大的是明清小说，《水浒传》，《西游记》等等，这些白话文学作品总的来看都是用北方方言写的，这些作品的流传，加速了 北方方言的推广。 &emsp;现代汉民族共同语是在北方方言的基础上形成的。形成过程中，北京话有着特殊的地位。唐代，北京地属幽州， 北方军事重镇；辽代，北京是五京之一；金元以来，北京成了我过政治，经济，文化的中心。因此，北京话的影响逐渐显著，地位日益重要。 &emsp;（公元1153年金迁都燕京，此后元明清，出了明初短时期建都金陵外，都建都北京，北京作为我国政治中心，前后历时八百多年） &emsp;五四运动后，我国资本主义发展，民族民主革命运动高涨，一方面，掀起了“白话文运动”，动摇了文言文的统治地位，另一方面开展了“国语运动”，又在口语方面增强了北京话的代表性，促使北京语音成为了全民族共同语的标准音。这两个运动互相推动，互相影响，就使书面语和口语接近起来，形成了现代汉民族的共同语。 &emsp;新中国建立以后，对民族共同语进一步统一和规范化有了更高的要求。后经各方研究，确定现代汉民族的共同语的三项标准涵义： &emsp;以北京语音为标准音，以北方话为基础方言，以典范的现代白话文著作为语法规范。 ​","link":"/2019/11/13/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E6%A6%82%E8%BF%B0-%E7%8E%B0%E4%BB%A3%E6%B1%89%E6%B0%91%E6%97%8F%E5%85%B1%E5%90%8C%E8%AF%AD/"},{"title":"现代汉语概述-什么是现代汉语","text":"汉语是汉民族的语言，现代汉语是现代汉民族所使用的语言。 汉语作为一种语言，具有一切语言共同的属性：​ 1.结构上，一种音义结合的符号系统。 ​ 2.功能上，人们交际工具和思维工具，不分阶级一视同仁为汉族全体成员服务。 现代汉语有口语和书面语两种不同的形式：​ 口语：人们口头上应用的语言，一发即逝，不能流传久远，为了打破口语的时间于空间的限制，创造文字来记录语言，出现书面语。 ​ 书面语：用文字写下来的语言，在口语基础上形成，易于反复打磨，加工，使之更加严谨。 文学语言：指的是经过加工，规范的书面语。​ 书面语的产生为文学语言的形成提供了先决条件。文学语言比一般的书面语更加丰富，更具表现力。文学语言不仅包括文艺作品语言，也包括社会科学和自然科学著作的语言，也包括口头形式的科学报告，答记者问，诗歌朗诵。文学语言主要表现在书面上，也在口头上为民族语言的健康发展有很大的推动作用。","link":"/2019/11/13/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E6%A6%82%E8%BF%B0-%E4%BB%80%E4%B9%88%E6%98%AF%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/11/12/hello-world/"},{"title":"Score,ACM/ICPC Seoul 2005,Uva1585","text":"There is an objective test result such as “OOXXOXXOOO”. An ‘O’ means a correct answer of a problem and an ‘X’ means a wrong answer. The score of each problem of this test is calculated by itself and its just previous consecutive ‘O’’’s only when the answer is correct. For example, the score of the 10th problem is 3 that is obtained by itself and its two previous consecutive ‘O’s. Input consists of T test cases. Output T lines of score. Sample Input 5OOXXOXXOOOOOXXOOXXOOOXOXOXOXOXOXOXOOOOOOOOOOOOOOXOOOOXOOOOX Sample Output 10975530 12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;string&gt;int main(){ int T; std::cin&gt;&gt;T; std::string answer; int score; while(T--){ std::cin&gt;&gt;answer; score = 0; int consecutive_num=0; for(unsigned int i = 0;i &lt; answer.size();++i) { if(answer[i]=='O') { ++consecutive_num; score+=consecutive_num; } else consecutive_num=0; } std::cout&lt;&lt;score&lt;&lt;std::endl; } return 0;}","link":"/2019/11/13/Uva1585/"},{"title":"The dole queue","text":"In a serious attempt to downsize the dole queue, The New National Green Labour Rhinoceros Party has decided on the following strategy. Every day all dole applicants will be placed in a large circle, facing inwards. Someone is arbitrarily chosen as number 1, and the rest numbered counter-clockwise up to N. Staring from 1 and moving counter-clockwise, one labour official counts off k applicants, while another official starts from N and moves clockwise, counting m applicants, The two who are chosen are then sent off for retraining. If both officials pick the same person she is sent off to become a politician. Each official then starts counting again at the next available person and the process continues until no-one is left. Sample Input10 4 30 0 0Sample Output␣␣4␣␣8,␣␣9␣␣5,␣␣3␣␣1,␣␣2␣␣6,␣10,␣␣7 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int maxn = 25;int n,k,m,a[maxn];int go(int p,int step,int sum){ while(sum--){ do{ p = (p+step+n-1)%n +1;//限制在0-n取模,再加上1 }while(a[p]==0); } return p;}int main(){ while(cin&gt;&gt;n&gt;&gt;k&gt;&gt;m &amp;&amp; n) { int p1 = 0,p2 = n+1; int left = n; for(int i =1;i&lt;=n;i++) a[i] = i; while(left) { p1 = go(p1,1,k); p2 = go(p2,-1,m); printf(\"%3d\",p1); left--; if(p1!=p2) { left--; printf(\"%3d\",p2); } a[p1]=a[p2]=0; if(left)printf(\",\"); } printf(\"\\n\"); } return 0;} ·取模先转为[0,n)范围 再+1实现[1,n+1)范围","link":"/2019/11/27/The%20Dole%20Queue/"}],"tags":[{"name":"数组","slug":"数组","link":"/tags/%E6%95%B0%E7%BB%84/"},{"name":"字符串","slug":"字符串","link":"/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"函数","slug":"函数","link":"/tags/%E5%87%BD%E6%95%B0/"},{"name":"c++","slug":"c","link":"/tags/c/"},{"name":"汉语言","slug":"汉语言","link":"/tags/%E6%B1%89%E8%AF%AD%E8%A8%80/"},{"name":"滑动窗口","slug":"滑动窗口","link":"/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"}],"categories":[{"name":"onlineJudge","slug":"onlineJudge","link":"/categories/onlineJudge/"},{"name":"c++Primer","slug":"c-Primer","link":"/categories/c-Primer/"},{"name":"现代汉语","slug":"现代汉语","link":"/categories/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD/"},{"name":"leetcodeMiddle","slug":"leetcodeMiddle","link":"/categories/leetcodeMiddle/"}]}