{"pages":[{"title":"tags","text":"","link":"/tags/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"1.6泛化能力","text":"","link":"/2020/02/02/1.6%E6%B3%9B%E5%8C%96%E8%83%BD%E5%8A%9B/"},{"title":"最长回文字串","text":"","link":"/2019/11/24/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%97%E4%B8%B2/"},{"title":"all in all, uva10340","text":"Sample Inputsequence subsequenceperson compressionVERDI vivaVittorioEmanueleReDiItaliacaseDoesMatter CaseDoesMatterSample OutputYesNoYesNo 判断string1 是否string2的子串。 12345678910111213141516171819202122232425262728#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;string&gt;using namespace std;string a,b;bool judge(string s1,string s2){ for(int i = 0;i&lt;=s2.size();i++) { if(s1[0]==s2[i]) { if(s1.size()==1) return true; else if(s2.size()==i+1) return false; else return judge(s1.substr(1),s2.substr(i+1)); } } return false;}int main(){ while(cin&gt;&gt;a&gt;&gt;b) { if(judge(a,b))cout&lt;&lt;\"Yes\"&lt;&lt;endl; else cout&lt;&lt;\"No\"&lt;&lt;endl; }}","link":"/2019/12/01/ALL%20IN%20ALL/"},{"title":"box,ACM/ICPC NEERC 2004,UVa1587","text":"给定6个矩形的长和宽，判断能否构成长方体 Sample Input1345 25842584 6832584 1345683 1345683 13452584 6831234 45671234 45674567 43214322 45674321 12344321 1234Sample OutputPOSSIBLEIMPOSSIBLE 对于一个长方体，应该a,b,c。对应的六个四面体应该为 (a,b)*2 (a,c)*2 (b,c)*2 去重，只剩下3组a,b;b,c;c,a; 剩下三组可以首位相接形成一个环。否则不是。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;typedef struct rectangle{ int wide; int hight; bool operator ==(const rectangle&amp;b )const{ return wide==b.wide&amp;&amp;hight==b.hight||wide==b.hight&amp;&amp;hight==b.wide; }};rectangle info[6];bool judge(){ bool flag=true; for(int i=1;i&lt;6;i++) { if(info[0]==info[i]) { flag = false; swap(info[1],info[i]); break; } } if(flag) return false; flag = true; for(int i=3;i&lt;6;i++) { if(info[2]==info[i]){ flag=false; swap(info[3],info[i]); break; } } if(flag) return false; if(!(info[4]==info[5]))return false; if(info[0].wide&gt;info[0].hight)swap(info[0].wide,info[0].hight); if(info[2].wide&gt;info[2].hight)swap(info[2].wide,info[2].hight); if(info[0].wide!=info[2].wide &amp;&amp; info[0].hight!=info[2].hight) return false; rectangle t; if(info[0].wide==info[2].wide){ t.hight = info[0].hight; t.wide = info[2].hight; if(t==info[4]) return true; else return false; } else{ t.hight = info[0].wide; t.wide = info[2].wide; if(t==info[4])return true; else return false; }}int main(){ while(cin&gt;&gt;info[0].wide&gt;&gt;info[0].hight &gt;&gt;info[1].wide&gt;&gt;info[1].hight &gt;&gt;info[2].wide&gt;&gt;info[2].hight &gt;&gt;info[3].wide&gt;&gt;info[3].hight &gt;&gt;info[4].wide&gt;&gt;info[4].hight &gt;&gt;info[5].wide&gt;&gt;info[5].hight) { if(judge())cout&lt;&lt;&quot;POSSIBLE\\n&quot;; else cout&lt;&lt;&quot;IMPOSSIBLE\\n&quot;; }}","link":"/2019/12/02/Box/"},{"title":"1.4模型评估与模型选择","text":"·假设学习到的模型是Y=f(X),训练误差是模型Y=f(X)关于训练数据集的平均损失： $$R(f)=1/N\\sum_{i=1}^N L(y_i,f(X_i))$$ 测试误差是模型 Y=f(X)关于测试数据集的平均损失： $$e_{test}$$ = 1/N$$\\sum_{i=1}^N L(y_i,f(x_i))$$ 通常将学习方法对未知数据的预测能力称为泛化能力 ·过拟合与模型选择 过拟合是指学习时候选择的模型所包含的参数过多，以致于出现这一模型对已知数据预测的很好，但对未知数据预测很差的现象。 正则化模型选择的典型方法是正则化，正则化是结构风险最小化策略的实现，是在经验风险上加一个正则化项或者罚项。比如，正则化项可以是模型参数向量的L2范数。 $$L(w)=1/N \\sum_{i=1}^N(f(x_i;w)-y_i)^2+\\lambda/2||w||^2$$ 这里，$$||w||$$表示参数向量w的$$L_2$$范数。 正则化符合奥卡姆剃刀原理，奥卡姆剃刀原理应用于模型选择时变为以下想法;在所有可能选择的模型中，能够很好地解释已知数据并且事分简单才是最好的模型，也就是应该选择的模型，从贝叶斯估计的角度来看，正则化项对对应于模型的先验概率，可以假设复杂的模型有较大的先验概率，简单的模型有较小的先验概率。 交叉验证1.简单交叉验证 随机将数据分为两部分，一部分作为训练集，一部分作为测试集；用训练集在各种条件下训练模型，从而得到不同的模型，在测试集上评估各个模型的测试误差，选出测试误差最小的模型； 2.S折交叉验证，方法如下：首先随机地将已给数据切分成S个互不相交的大小相同的子集，然后利用S-1个子集的数据训练模型，利用余下的子集测试模型；将这一过程对可能 的S中选择重复进行，最后选出S次评测中平均测试误差最小的模型。 3.留一交叉验证 S则交叉验证的特殊情形是S=N，称为留一交叉验证，N是给定数据集的容量。","link":"/2020/01/27/1.4%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9/"},{"title":"Digit Counting, UVa1225","text":"Trung takes a piece of chalk and starts writing a sequence of consecutive integers starting with 1 to N( 1&lt;N&lt;10000). After that,he counts the number of times each digit appears in the sequence. Input T and each number Output for each test case, write sequentially in one line the number of digit 0-9 separated by a space. Sample Input 2313 Sample Output 0 1 1 1 0 0 0 0 0 01 6 2 2 1 1 1 1 1 1 123456789101112131415161718192021222324252627282930313233#include&lt;iostream&gt;#include&lt;string&gt;int main(){ int T; std::cin&gt;&gt;T; while(T--) { int n; int digit=0; std::cin&gt;&gt;n; int total[10]={0,0,0,0,0,0,0,0,0,0}; for(int i =1;i&lt;=n;++i) { int x=i; while(x!=0) { digit = x%10; total[digit]++; x/=10; } } for(int i =0;i&lt;10;i++) { if(i!=9){ std::cout&lt;&lt;total[i]&lt;&lt;\" \"; } else std::cout&lt;&lt;total[i]&lt;&lt;std::endl; } }return 0;}","link":"/2019/11/14/DigitCounting/"},{"title":"Hangman Judge, UVa 489","text":"1234567________________| / | |/ ⚪| / | \\| || / \\| &emsp;输入单词和玩家猜测，猜测最多错六次，否则lose；全部猜对win；放弃checked out;猜过的单词也算错误。 1.The contestant tries to solve puzzl eby guessing one letter at a time. 2.Every time a guess is correct, all the characters in the word that match the guess will be “turned over.” For example, if your guess is ‘o’ and the word is ‘book’,then both ‘o’s in the solution will be counted as ‘solved’. 3.Every time a wrong guess is made, a stroke will be added to the drawing of a hangman, which needs 7 strokes to complete. Each unique wrong guess only counts against the contestant once. Sample Input1cheesechese2cheeseabcdefg3cheeseabcdefgij-1Sample OutputRound 1You win.Round 2You chickened out.Round 3You lose. 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int chance;string game;string guess;void run(){ chance =6; for(unsigned int i = 0;i&lt;guess.size();i++) { if(chance&lt;0) break; char temp = guess[i]; if(game.find(temp,0)!=string::npos) { while(game.find(temp,0)!=string::npos) { game.erase(game.find(temp,0),1); } } else --chance; } if(game.empty())cout&lt;&lt;\"You win.\"&lt;&lt;endl; else if(chance&lt;0) cout&lt;&lt;\"You lose.\"&lt;&lt;endl; else cout&lt;&lt;\"You chickened out.\"&lt;&lt;endl;}int main(){ while(true) { int round; cin&gt;&gt;round; if(round==-1) return 0; cout&lt;&lt;\"Round \"&lt;&lt;round&lt;&lt;endl; cin&gt;&gt;game&gt;&gt;guess; run(); }}","link":"/2019/11/24/HangMan/"},{"title":"12.2隐含的this指针","text":"成员函数具有一个附加的隐含形参，即指向该类对象的 一个指针，这个隐含指针命名为this，与调用成员函数的对象绑定在一起。成员函数不能定义this形参，而是由编译器隐含地定义。成员函数的函数体可以显示使用this指针，但不是必须这么做。如果对类成员的引用没有限定，编译器会将这种引用处理成通过this指针的引用。 1.何时使用this指针当我们需要将一个对象作为整体引用而不是引用对象的一个成员时，最常见的情况是在这样的函数中使用this：该函数返回对调用该函数的对象的引用。 某种类可能具有某些操作，这些操作应该返回引用，Screen类就是这样的一个类，迄今为止，我们的类只有一对get操作，逻辑上，我们可以添加下面的操作。 一对set操作，将特定字符或光标指向的字符设置为给定值 一个move操作，给定两个index值，将光标移到新的位置。 理想的情况下， 希望用户能够将这些操作的序列连接成一个单独的表达式。 1234myScreen.move(4,0).set('#');等价于:myScreen.move(4,0);myScreen.set('#'); 2.返回*this1234567891011121314151617class Screen{public: Screen&amp; move(index r,index c); Screen&amp; set(char); Screen&amp; set(index,index,char);}Screen&amp; Screen::set(char c){ contents[cursor] = c; return *this;}Screen&amp; Screen::move(index r,index c ){ index row = r*width; cursor = row+c; return *this;} this 是一个指向非常量Screen的指针，如同任意的指针一样，可以通过对this指针解引用来访问this指向的对象。 3.从const成员函数返回*this不能从const成员函数返回指向类对象，的普通引用， const成员函数只能返回*this作为一个const引用。 例如，我们可以给Screen类增加一个display操作，这个函数应该在给定的ostream上打印contents，逻辑上，这个操作应该是一个const成员，打印contents不会改变对象，如果将display作为Screen的const成员，则display内部的this指针将是一个const Screen*型的const。 然而，与move和set操作一样，我们希望能够在一个操作序列中使用display。 1myScreen.move(4,0).set('#').display(cout); 如果display是一个const成员，则它的返回类型必须是const Screen&amp;;那么不能执行myScreen.display().set(‘*’)； 问题在于这个表达式在由display返回的对象上运行set，该对象是const，不能在const上调用set， 4.基于const的重载定义两个display 一个是const一个不是const。基于成员函数是否为const,重载一个成员函数，同样的基于一个指针形参是否指向const可以重载一个函数。const对象只能使用const成员。 12345678910class Screen{public:Screen&amp; display(std::ostream &amp;os) {do_display;return *this;}const Screen&amp; display(std::ostream&amp;os)const {do_display;return *this;}private: void do_display(std::ostream &amp;os)const {os&lt;&lt;contents;}}; 5. 可变数据成员mutable data member永远都不能为const，甚至当它是const对象的成员的时候也是如此，所以const成员函数可以改变mutable成员 12345678910class Screen{ public: private: mutable size_t access_ctr; }void Screen::do_display(std::ostream&amp; os) const { ++access_ctr; os&lt;&lt;contents; } 6.类作用域&nbsp;每个类定义了自己的新作用域和唯一的类型，在类的定义体内声明类成员，将成员名引入类的作用域，两个不同的类具有两个类作用域，即使两个类具有完全相同的成员列表。 &nbsp;在类的作用域之外，成员只能通过对象或者指针分别使用成员访问操作符，或者-&gt;来访问。这些操作符左边的操作数分别是一个类对象或者指向类对象的指针，跟在操作符后面的成员名字必须在相关联的类的作用域中声明 123456class obj;class *ptr = &amp;obj;ptr-&gt;member;obj.memeber;ptr-&gt;memfcn();obj.memfcn(); 7.作用域与成员定义尽管成员是在类的定义体之外定义的，但成员定义就好像它们是在类的作用域中一样。出现在类的定义体之外的成员定义必须指明成员出现在哪个类中； 形参表和函数体处于类作用域中 函数返回类型不一定在类的作用域中","link":"/2020/01/14/12.2%E9%9A%90%E5%90%AB%E7%9A%84this%E6%8C%87%E9%92%88/"},{"title":"1.3统计学习三要素","text":"·方法=模型+策略+算法 ·监督学习中，模型就是所要学习的条件概率分布或决策函数。 ·假设空间定义为决策函数or条件概率愤怒的集合。函数族，概率分布族。 ·策略：按照什么样的准则学习或选择最优的模型，统计学习的目标在于从假设空间中选取最优模型。 ·损失和函数和风险函数 12345678监督学习问题是在假设空间中选择模型作为决策函数，对于给定的输入X，由f(X)给出相应的输出Y，这个输出的预测值f(X)与真实值可能一致也可能不一致，用一个损失函数或代价函数来度量预测错误的程度，损失函数是f(X)和Y的非负实值函数，记作L(Y,f(X)).统计学习常用的损失函数有以下几种：(1) 0-1损失函数(2)平方损失函数(3)绝对损失函数(4)对数损失函数 L(Y,P(Y|X))=-logP(Y|X)损失函数值越小，模型就越好，由于模型的输入，输出是随机变量，遵循联合分布P(X|Y)，所以损失函数的期望是： $$R_{exp}(f)=E_p[L(Y,f(X))]=\\int_{x\\times y}P(x,y)dxdy$$ &nbsp;这是理论上模型f(X)关于联合分布P(X,Y)的平均意义下的损失，称为风险函数或期望函数。 —&gt;学习的目标就是选择期望风险最小的模型，由于联合分布P(X,Y)是未知的，$$R_{exp}$$不能直接计算，实际上，如果知道联合分布律，我们就可以计算出条件概率。一方面要用到联合分布率，另一方面联合分布率是未知的，所以监督学习成为一个病态问题 ill-formed problem。 给定一个训练数据集 T = {($$x_1,y_1$$),($$x_2,y_2$$),…,($$x_i,y_i$$),…,($$x_n,x_n$$)} 模型f(X)关于训练数据集的平均损失称为经验风险(empirical risk)或经验损失(empirical loss)，记作$$R_{exp}$$: $$R_{exp}(f) = 1/N \\sum_{i=1}^NL(y_i,f(x_i))$$ 期望风险$$R_{exp}(f)$$是模型关于联合分布的期望损失，经验风险$$R_{emp}(f)$$是模型关于训练样本集的平均损失，根据大数定律，当样本容量N趋于无穷时，经验风险$$R_{emp}(f)$$趋于期望风险。 &nbsp;&nbsp;现实中训练样本数目有限，甚至很小，所以用经验风险估计期望风险常常并不理想，要对经验风险进行一定的矫正，关系到监督学习的两个基本策略：经验风险最小化和结构风险最小化。 ·经验风险最小化和结构风险最小化 &nbsp;&nbsp;在假设空间、损失函数以及训练数据集确定的情况下，经验风险函数式就可以确定。经验风险最小化的策略认为，经验风险最小的模型是最优的模型。根据这一策略，按照经验风险最小化最优模型就是求解最优化问题: $$min:1/N \\sum L(y_i,f(x_i))$$ 123当样本容量足够大时，经验风险最小化能保证有很好的学习效果，在现实中被广泛采用，比如，极大似然估计就是经验风险最小化的一个例子，当模型是条件概率分布，损失函数是对数损失函数时，经验风险最小化就等价于极大似然估计。当样本容量很小时，经验风险最小化学习的效果就未必很好，会产生过拟合。结构风险最小化，structural risk minimization是为了防止过拟合而提出来的策略，结构风险最小化等价于正则化。结构风险在经验风险上加上表示模型复杂度的正则化项regularizer或者罚项penalty term，在假设空间、损失函数以及训练数据集确定的情况下，结构风险的定义是： $$R_{srm}(f)=1/N \\sum_{i=1}^NL(y_i,f(X_i))+\\lambda J(f)$$ 1J(f)为模型的复杂度，是定义在假设空间上的泛函，模型越复杂J(f)越大，反之，模型f越简单，复杂度越小，也就是说，复杂度表示了对复杂模型的惩罚，结构风险小需要经验风险与模型复杂度同时小。","link":"/2020/01/26/1.3%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E4%B8%89%E8%A6%81%E7%B4%A0/"},{"title":"kickdown","text":"​ 给出两个长度分别为n1,n2，且每列高度只为1或2的长条，需要将它们放入一个高度为3的容器，问能够容纳它们的最短容器长度。 Sample Input211211211222121121212121221212121221122112221212Sample Output10815 !!!从左往右和从右往左 取最小 比如 21 2222 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;algorithm&gt;using namespace std;int ansCal(string s1,string s2){ if(s1.size()&lt;s2.size()) swap(s1,s2); unsigned int p1=0; unsigned int p2=0; unsigned int begin =0; while(p1&lt;s1.size()&amp;&amp;p2&lt;s2.size()&amp;&amp;begin&lt;s1.size()) { if(((s1[p1]-'0')+(s2[p2]-'0'))&gt;3){ p2=0; p1=++begin; } else { p2++; p1++; } } if(p1&lt;s1.size()&amp;&amp;p2==s2.size()) return s1.size(); else return s1.size()+s2.size()-p2;}int main(){ string s1,s2; while(cin&gt;&gt;s1&gt;&gt;s2){ int ans1=ansCal(s1,s2); string s3; string s4; for( int i=s1.size()-1;i&gt;=0;i--) { s3+=s1[i];} for( int i=s2.size()-1;i&gt;=0;i--) s4+=s2[i]; int ans2 = ansCal(s3,s4); cout&lt;&lt;min(ans1,ans2)&lt;&lt;endl; } return 0;}","link":"/2020/01/07/Kickdown/"},{"title":"DNA Consensus String, ACM/ICPC Seoul 2006, Uva1368","text":"寻找一组字符串对应的一个汉明距离总和最小的字符串。结果不唯一取字典序最小的解。ACGT。 Sample Input35 8TATGATACTAAGCTACAAAGATCCTGAGATACTAAGATGT4 10ACGTACGTACCCGTACGTAGGCGTACGTATTCGTACGTAA6 10ATGTTACCATAAGTTACGATAACAAAGCAAAAGTTACCTTAAGTTACCAATACTTACCAASample Out TAAGATAC7ACGTACGTAA6AAGTTACCAA12 123456789101112131415161718192021222324252627282930313233343536373839404142434445//4&lt;=m&lt;=50,4&lt;=n&lt;=1000#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;char info[70][1200];int n,m;const char ACGT[4]{'A','C','G','T'};int cnt[4];int main(){ int T; cin&gt;&gt;T; while(T--) { int hanming=0; cin&gt;&gt;n&gt;&gt;m; for(int i =0;i&lt;n;i++) scanf(\"%s\",info[i]); for(int i =0;i&lt;m;i++) { memset(cnt,0,sizeof(cnt)); for(int j =0;j &lt; n;j++) { if(info[j][i] =='A')cnt[0]++; else if(info[j][i]=='C')cnt[1]++; else if (info[j][i]=='G')cnt[2]++; else cnt[3]++; } int maxPos=0; for(int k=0;k&lt;4;k++) { if(cnt[k]&gt;cnt[maxPos]) maxPos = k; } hanming+=(n-cnt[maxPos]); info[n][i] = ACGT[maxPos]; } info[n][m] = '\\n'; info[n][m+1]='\\0'; printf(\"%s\",info[n]); printf(\"%d\\n\",hanming); }} ·只需要找到每列出现最多的字符即可，并且ACGT为优先级顺序。","link":"/2019/12/01/DNA%20Consensus%20String/"},{"title":"MolarMass","text":"An organic compound /ˈkɒmpaʊnd/ is any member of a large class of chemical compounds whose molecules contain carbon. The molar mass of an organic compound is the mass of one mole of the organic compound. The molar mass of an organic compound can be computed from the standard atomic weights of the elements. When an organic compound is given as a molecular formula, DR. CHON wants to find its molar mass. A molecular formula. The following table shows that the standard atomic weights for ‘C’, ‘H’, ‘O’, and ‘W’. Carbon Hydrogen Oxygen Nitrogen 12.01g/mol 1.008 g/mol 16.00 g/mol 14.01 g/mol Input T test cases. Output molar mass of the given molecular formula. Sample Input 4CC6H5OHNH2CH2COOHC12H22O11 Sample Output 12.01094.10875.070342.296 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;string&gt;#include &lt;iomanip&gt;int main(){ float moleMass[300]; moleMass['C']=12.01; moleMass['H']=1.008; moleMass['O']=16.00; moleMass['N']=14.01; std::string total(\"CHON\"); int T; std::cin&gt;&gt;T; while(T--) { std::string formula; float mass=0; char present_char; int num=0; std::cin&gt;&gt;formula; for(std::string::size_type i=0;i&lt;formula.size();++i) { if(i==0){ present_char = formula[i]; }//首位特殊 else if(total.find(formula[i])!=std::string::npos){//CHON之一 mass+=moleMass[present_char]*(num==0?1:num); present_char = formula[i]; num=0; } else{//数字 num = num*10+(formula[i]-'0'); } if(i==formula.size()-1)//末位特殊 mass+=moleMass[present_char]*(num==0?1:num); } std::cout.setf(std::ios::fixed); std::cout&lt;&lt;std::fixed&lt;&lt;std:: setprecision(3)&lt;&lt;mass&lt;&lt;std::endl; } return 0;} Solution 从左到右遍历字符串字符 如果当前字符是CNOH之一，则结算前面元素的molecular mass。并且更新当前元素，数量更新为0。 否则当前字符是数字，则更新num。 num的初始值设置为0，方便更新（*10+x），结算时候判断，如果num为0说明只有一个应该乘以1而不是num。 第一个字符和最后一个字符特殊处理。第一个字符无需判断，最后一个字符处理完结算。 Problem string.find()的返回值类型是string::size_type，查找失败返回的是string::npos。 cout 输出小数点后指定位数 1234567#include&lt;iomanip&gt;cout &lt;&lt; \"a=\" &lt;&lt; setprecision(2) &lt;&lt; a &lt;&lt;endl;//截断cout.setf(ios::fixed);cout &lt;&lt; \"a=\" &lt;&lt;fixed&lt;&lt; setprecision(2) &lt;&lt; a &lt;&lt;endl; //补零cout.unsetf(ios::fixed);cout &lt;&lt; \"a=\" &lt;&lt; setprecision(2) &lt;&lt; a &lt;&lt;endl; //","link":"/2019/11/13/MolarMass/"},{"title":"Repeating Deciamals, ACM/ICPC World Finals 1990,UVa202","text":"&emsp;输入整数a和b(0&lt;=a&lt;=3000, 1&lt;=b&lt;=3000),输出a/b的循环小数表示以及循环节长度。例如a = 5,b = 43,小数表示为0.(116279069767441790465),循环节长度为21。","link":"/2019/12/01/Repeating%20Decimals/"},{"title":"puzzle,UVa227，world Finals 1993","text":"&emsp;The illustration below represents a puzzle in its original configuration and in its configuration after the following sequence of 6 moves: 1) The square above the empty position moves. 2) The square to the right of the empty position moves. 3) The square to the right of the empty position moves. 4) The square below the empty position moves. 5) The square below the empty position moves. 6) The square to the left of the empty position moves. 1234567----------- -----------|T|R|G|S|J| |T|R|G|S|J| |X|D|O|K|I| |X|O|K|L|I||M| |V|L|N| |M|D|V|B|N||W|P|A|B|E| |W|P| |A|E||U|Q|H|C|F| |U|Q|H|C|F|----------- ----------- Input Input for your program consists of several puzzles. Each is described by its initial configuration and the sequence of moves on the puzzle. The first 5 lines of each puzzle description are the starting configuration. Subsequent lines give the sequence of moves. Output Output for each puzzle begins with an appropriately labeled number(Puzzle #1,Puzzle #2, etc.). If the puzzle has no final configuration, then a message to the effect should follow. Otherwise that final configuration should be displayed. Sample Input TRGSJXDOKIM VLNWPABEUQHCFARRBBL0ABCDEFGHIJKLMNOPQRSTUVWXAAALLLL0ABCDEFGHIJKLMNOPQRSTUVWXAAAAABBRRRLL0ZSample OutputPuzzle #1:T R G S JX O K L IM D V B NW P A EU Q H C FPuzzle #2:A B C DF G H I EK L M N JP Q R S OT U V W XPuzzle #3:This puzzle has no final configuration. 注意输入输出格式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;char present;char puzzle[5][5];int dx,dy;void sswap(int m,int n){ char temp = puzzle[dx][dy]; puzzle[dx][dy]=puzzle[dx+m][dy+n]; puzzle[dx+m][dy+n]=temp; dx = dx+m;dy = dy+n;}int main(){ int num=0; while(true) { ++num; while(scanf(\"%c\",&amp;present)&amp;&amp;present=='\\n'); if(present=='Z')return 0; else{ if(num!=1)cout&lt;&lt;endl; for(int i =0;i&lt;5;i++) for(int j=0;j&lt;5;j++) { if(i==0&amp;&amp;j==0){ if(present==' '){dx=i;dy=j;} puzzle[i][j]=present; } else{ while(scanf(\"%c\",&amp;present)&amp;&amp;present=='\\n'); if(present==' '){dx=i;dy=j;} puzzle[i][j]=present; } } }//get the puzzle; bool isAns=true; while(true) { while(scanf(\"%c\",&amp;present)&amp;&amp;(present=='\\n'||present==' ')); if(present=='A'&amp;&amp;isAns) { if(dx!=0) { sswap(-1,0); } else{ isAns=false; cout&lt;&lt;\"Puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; cout&lt;&lt;\"This puzzle has no final configuration.\\n\"; } } else if(present=='B'&amp;&amp;isAns) { if(dx!=4) { sswap(1,0); } else{ isAns=false; cout&lt;&lt;\"Puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; cout&lt;&lt;\"This puzzle has no final configuration.\\n\"; } } else if(present=='R'&amp;&amp;isAns) { if(dy!=4) { sswap(0,1); } else{ isAns=false; cout&lt;&lt;\"Puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; cout&lt;&lt;\"This puzzle has no final configuration.\\n\"; } } else if(present=='L'&amp;&amp;isAns) { if(dy!=0) { sswap(0,-1); } else{ isAns=false; cout&lt;&lt;\"Puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; cout&lt;&lt;\"This puzzle has no final configuration.\\n\"; } } else if(present=='0') break; } if(isAns) { cout&lt;&lt;\"Puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; for(int i =0;i&lt;5;i++) { for(int j =0;j&lt;4;j++) cout&lt;&lt;puzzle[i][j]&lt;&lt;' '; cout&lt;&lt;puzzle[i][4]&lt;&lt;endl; } } }} while(scanf()&amp;&amp;())吃掉多余空格和回车。 输入不用担心puzzle部分有多余空格","link":"/2019/11/16/Puzzle/"},{"title":"Xiangqi,ACM/ICPC","text":"考虑一个象棋残局，其中红方有n个棋子，黑方只有一个将，红方除了有一个帅之外还有3种可能的棋子:车，马，炮，并且需要考虑蹩马腿与将和帅不能照面的规则。 输入所有棋子的位置，保证局面合法并且红方已经将军，你的任务是判断红方是否已经把黑方将死。","link":"/2020/01/10/Xiangqi/"},{"title":"Spreadsheet Tracking","text":"​ The input consists of a sequence of spreadsheets, operations on those spreadsheets, and queries about them. Each spreadsheet definition begins with a pair of integers specifying its initial number of rows and columns, followed by an integer specifying the number of spreadsheet operations. Row and column labeling begins with 1. The maximum number of rows or columns of each spreadsheet is limited to 50. The following n lines specify the desired operations. ​ An operation to exchange the contents of cell with the contents of cell r2,c2 is given by: EX r1 c1 r2 c2 ​ The four insert and delete commands –DC(delete conlumns), DR(delete rows), IC(insert columns) and IR(insert rows) are given by: ​ A x1 x2 … xa ​ where is one of the four commands; A is a positive integer less than 10, and x1,…,xa are the labels of the columns or rows to be deleted or inserted before. For each insert and delete command, the order of the rows or columns in the command has no significance, Within a single delete or insert command, labels will be unique. Output For each spreadsheet, your program must output its sequence number. For each query, your program must output the original cell location followed by the final location of the data or the Separate output from different spreadsheets with a blank line. The data file will not contain a sequence of commands that will cause the spreadsheet to exceed the maximum size. Sample Input 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include&lt;stdio.h&gt;#include&lt;string.h&gt;#define maxd 100#define BIG 10000int r, c, n, d[maxd][maxd], d2[maxd][maxd], ans[maxd][maxd], cols[maxd];void copy(char type, int p,int q){ if(type=='R') { for(int i =1;i&lt;=c;i++) d[p][i]=d2[q][i]; } else{ for(int i =1;i&lt;=c;i++) d[i][p]=d2[i][q]; }}void del(char type){ memcpy(d2,d,sizeof(d)); int cnt = type=='R'?r:c,cnt2=0; for(int i =1;i&lt;=cnt;i++) { if(!cols[i]) copy(type,++cnt2,i); //为0的话就是不用del，应该复制 } if(type=='R') r=cnt2;else c = cnt2;}void ins(char type){ memcpy(d2,d,sizeof(d)); int cnt = type=='R'?r:c,cnt2=0; for(int i =1;i&lt;=cnt;i++) { if(cols[i]) copy(type,++cnt2,0); copy(type,++cnt2,i); } if(type=='R') r=cnt2;else c=cnt2;}int main(){ int r1,c1,r2,c2,q,kase=0; char cmd[10];//读入命令 memset(d,0,sizeof(d)); while(scanf(\"%d%d%d\",&amp;r,&amp;c,&amp;n)==3 &amp;&amp; r) { int r0=r,c0=c; for(int i =1;i&lt;=r;i++) for(int j =1;j&lt;=c;j++) d[i][j]=i*BIG+j; while(n--) //一次处理一条指令 { scanf(\"%s\",cmd); if(cmd[0]=='E'){ scanf(\"%d%d%d%d\",&amp;r1,&amp;c1,&amp;r2,&amp;c2); int t = d[r1][c1]; d[r1][c1]=d[r2][c2]; d[r2][c2]=t; } else{ int a,x; scanf(\"%d\",&amp;a); memset(cols,0,sizeof(cols)); for(int i =0;i&lt;a;i++) { scanf(\"%d\",&amp;x); cols[x]=1; } if(cmd[0]=='D') del(cmd[1]); else ins(cmd[1]); } } memset(ans,0,sizeof(ans)); for(int i=1;i&lt;=r;i++) for(int j =1;j&lt;=c;j++) ans[d[i][j]/BIG][d[i][j]%BIG] = i*BIG+j; //存储变化后的位置 if(kase&gt;0)printf(\"\\n\"); printf(\"Spreadsheet #%d\\n\",++kase); scanf(\"%d\",&amp;q); while(q--) { scanf(\"%d%d\",&amp;r1,&amp;c1); printf(\"Cell data in (%d,%d) \",r1,c1); if(ans[r1][c1]==0)printf(\"GONE\\n\"); else printf(\"moved to (%d,%d)\\n\",ans[r1][c1]/BIG,ans[r1][c1]%BIG); } } return 0;}","link":"/2020/01/11/SpreadsheetTracking/"},{"title":"Periodic Strings,UVa455","text":"A character string is said to have period k if it can be formed by concatenating one or more repetitious of another string of length k. For example, the string “abcabcabcabc “ has perid 3, since it is formed by 4repetitions of the “abc”. It also has periods 6 and 12 . &emsp;Write a program to read a character and determine its smallest period. Input An first line of the input file will contain a single integer N indicting how many test case that your program will test followed by blank line. Each test case will contain a single character string of up to 80 non-blank characters. Two consecutive input will separated by a blank line. Output An integer denoting the smallest period of the input string for each input. Two consecutive output are separated by a blank line. Sample Input 1HoHoHo Sample Output 2 12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include&lt;string&gt;int main(){ int T; std::cin&gt;&gt;T; while(T--) { std::string line; std::cin&gt;&gt;line; for(int i =1; i&lt;=line.length();++i) { if(line.length()%i!=0) continue; else{ std::string temp =line.substr(0,i); std::string cmp(\"\"); for(int j =0;j&lt;line.length()/i;j++) cmp+=temp; if(line==cmp) { std::cout&lt;&lt;i&lt;&lt;std::endl; break; } } } }return 0;} &emsp; string.size(),string.length()没有实质区别，length()是从c语言中习惯传承的，string最开始只有length，后来STL引入，作为STL容器属性存在，便于符合STL接口规则。 环形串解法 &emsp;看成一个圆，圆转动多少位能复原即可得出解。 12345abcabcabc//原cabcabcab//右移一位bcabcabca//2位abcabcabc//3位置 解为3s[i]==s[(i+n)%size]; 123456789101112131415161718192021222324#include&lt;iostream&gt;#include&lt;string&gt;int main(){ int T; std::cin&gt;&gt;T; while(T--) { std::string line; std::cin&gt;&gt;line; int i=1; for(;i&lt;=line.size();i++) { bool flag = false; for(int j=0;j&lt;line.size();j++) if(line[j]!=line[(j+i)%line.size()]) flag=true; if(flag==false){ std::cout&lt;&lt;i&lt;&lt;std::endl; break; } } }return 0;}","link":"/2019/11/15/Uva455/"},{"title":"MessageDecoding","text":"输入编码头和编码文本，对编码文本进行解码 Sample inputTNM AEIOU0010101100011101000100111011001111000 Sample output*TAN ME 跨行字符读入的处理和二进制存储方式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;cstdio&gt;#include&lt;cstring&gt;int readchar() //处理跨行的问题{ for(;;) { int ch = getchar(); if(ch != &apos;\\n&apos; &amp;&amp; ch!=&apos;\\r&apos;) return ch; //一直读到非换行字符 }}int readint(int c){ int v = 0; while(c--) v=v*2+readchar()-&apos;0&apos;; return v;}int code[8][1&lt;&lt;8];int readcodes(){ memset(code,0,sizeof(code));//清空数组 code[1][0] = readchar(); for(int len = 2;len&lt;=7;len++) { for(int i =0;i&lt;(1&lt;&lt;len-1);i++) { int ch = getchar(); if(ch==EOF) return 0; if(ch==&apos;\\n&apos;||ch==&apos;\\r&apos;)return 1; code[len][i]=ch; } } return 1;}int main(){ while(readcodes()){ //读入编码头 for(;;) { int len = readint(3); //读入编码长度 if(len==0) break;//len==0说明整个编码结束 for(;;){ int v = readint(len); if(v==(1&lt;&lt;len)-1)break; putchar(code[len][v]); } } putchar(&apos;\\n&apos;); } return 0;}","link":"/2020/01/10/MessageDecoding/"},{"title":"Score,ACM/ICPC Seoul 2005,Uva1585","text":"There is an objective test result such as “OOXXOXXOOO”. An ‘O’ means a correct answer of a problem and an ‘X’ means a wrong answer. The score of each problem of this test is calculated by itself and its just previous consecutive ‘O’’’s only when the answer is correct. For example, the score of the 10th problem is 3 that is obtained by itself and its two previous consecutive ‘O’s. Input consists of T test cases. Output T lines of score. Sample Input 5OOXXOXXOOOOOXXOOXXOOOXOXOXOXOXOXOXOOOOOOOOOOOOOOXOOOOXOOOOX Sample Output 10975530 12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;string&gt;int main(){ int T; std::cin&gt;&gt;T; std::string answer; int score; while(T--){ std::cin&gt;&gt;answer; score = 0; int consecutive_num=0; for(unsigned int i = 0;i &lt; answer.size();++i) { if(answer[i]=='O') { ++consecutive_num; score+=consecutive_num; } else consecutive_num=0; } std::cout&lt;&lt;score&lt;&lt;std::endl; } return 0;}","link":"/2019/11/13/Uva1585/"},{"title":"11.2初窥算法","text":"算法永不执行容器提供的操作，泛型算法本身不执行容器的操作，只是单独依赖迭代器和迭代器操作实现，而非基于容器操作。 ·输入范围：出了少数例外，所有算法都在一段范围的元素上操作，这段范围称为 “input range”。此类算法前两个参数标记范围。 ·理解算法基本方法：理解是否读元素，是否写元素，或者对元素进行重新排序。 1.只读算法&emsp;只读取输入范围内的元素。ex: accumulate 1int sum = accumulate(vec.begin(), vec.end(),42); 指定第三个实参是必要的。 121.累加需要一个起始值。2.容器内的元素类型必须与第三个实参的类型匹配或者可以转换。 12string sum = accumulate(v.begin(),v.end(),string(\"\"));//实现了累加但是第三个参数不是字符串常量\"\"，因为string的加法操作数一个是string一个是const char* ex2: first_find_of//标记两段元素范围，在第一段范围内查找与第二段范围任意元素匹配的元素，返回迭代器。 2.写容器元素的算法&emsp;一些算法写入元素值，在使用这些算法写元素时当心，必须确保算法所写的序列至少足以存储要写入的元素。 写入输入序列的元素&emsp;写入到输入序列的算法本质上是安全的–只会写入与指定输入范围数量相同的元素。ex:fill 1fill(v.begin(), vec.begin() + vec.size() / 2, 10); 不检查写入操作的算法&emsp;fill_n: 迭代器+计数器+值； 对指定数目的元素做写入运算，或者写入目标迭代器的算法，都不检查目标的大小是否足以存储要写入的元素。 引入back_inserter&emsp;插入迭代器是可以给基础容器添加元素的迭代器。通常，用迭代器给容器元素赋值时，被赋值的是迭代器所指向的元素，插入迭代器会容器中添加一个元素，其值等于赋值运算的右操作数的值。 12vector&lt;int&gt; vec;fill_n(back_interator(vec),10,0); 写入到目标迭代器的算法&emsp;第三类算法向目标迭代器写入未知个数的元素，正如fill_n函数一样，目标迭代器指向存放输出数据的序列中第一个元素。ex: copy 12vector&lt;int&gt; ivec;copy(ilist.begin(),ilist.end(),back_iterter(ivec)); 3对容器元素重新排序的算法","link":"/2019/11/20/c++%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/11/12/hello-world/"},{"title":"Crossword Answer","text":"&emsp; A crossword puzzle consists of a rectangular grid of black and white squares and two lists of definitions. 12345678______________________|1 |2 |3 |■ |4 |5 |6 ||■ |7 | |■ |8 | | ||9 | | |10|■ |11| ||12| |■ |13|14| | ||■ |15|16|■ |17| |■ ||18| | |■ |19| |20|—————————————————————— &emsp;You must write a program that takes several solved crossword puzzles as input and outputs the lists of across and down words which constitute the solutions. 起始格：左边是界外或者■， 或者上边是界外或者■，(可以扩展边界以便统一为■) Input Each puzzle solution in the input starts with a line containing two integers r and c. The r rows of input which follow each contain c characters which describe the solution. Each of those c characters is an alphabetic character which is part of a word or the character ‘*’, which indicates a black square. The end of input is indicated by a line consisting of the single number ‘0’. Output Output for each puzzle consists of an identifier for the puzzle and the list of across words followed by the list of down words. Words in each list must be output one-per-line in increasing order of the number of their corresponding definitions. The heading for the list of across words is ‘Across’. The heading for the list of down words is ‘Down’. In the case where the lists are empty, the ‘Across’ and ‘Down’ heading should still appear. Separate output for successive input puzzles by a blank line. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647Sample Input2 2AT*O6 7AIM*DEN*ME*ONEUPON*TOSO*ERIN*SA*OR*IES*DEA0Sample Outputpuzzle #1:Across1.AT3.ODown1.A2.TOpuzzle #2:Across1.AIM4.DEN7.ME8.ONE9.UPON11.TO12.SO13.ERIN15.SA17.OR18.IES19.DEADown1.A2.IMPOSE3.MEO4.DO5.ENTIRE6.NEON9.US10.NE14.ROD16.AS18.I20.A 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;char puzzle[20][20];int mark[20][20];int r,c;int num=0;void run();void run(){ cout&lt;&lt;\"puzzle #\"&lt;&lt;num&lt;&lt;\":\"&lt;&lt;endl; cout&lt;&lt;\"Across\"&lt;&lt;endl; for(int i =0;i&lt;r;++i) for(int j =0;j&lt;c;++j) { if(mark[i][j]!=-1) { if(j==0||j!=0&amp;&amp;mark[i][j-1]==-1) { cout&lt;&lt;\" \"&lt;&lt;mark[i][j]&lt;&lt;\".\"&lt;&lt;puzzle[i][j]; if(j==c-1)cout&lt;&lt;endl; } else if(j==c-1||j!=c-1&amp;&amp;mark[i][j+1]==-1) cout&lt;&lt;puzzle[i][j]&lt;&lt;endl; else cout&lt;&lt;puzzle[i][j]; } } cout&lt;&lt;\"Down\"&lt;&lt;endl; for(int i =0;i&lt;r;++i) for(int j=0;j&lt;c;++j){ if(mark[i][j]!=-1) { if(i==0 || i!=0&amp;&amp;mark[i-1][j]==-1) { cout&lt;&lt;\" \"&lt;&lt;mark[i][j]&lt;&lt;\".\"&lt;&lt;puzzle[i][j]; if(i==r-1) cout&lt;&lt;endl; for(int k=i+1;k&lt;r;++k) { if(mark[k][j]!=-1){ cout&lt;&lt;puzzle[k][j]; mark[k][j]=-1; if(k==r-1)cout&lt;&lt;endl; } else{cout&lt;&lt;endl;break;} } } } }}int main(){ while(true){ num++; cin&gt;&gt;r; if(r==0) return 0; cin&gt;&gt;c; int count=0; cout&lt;&lt;endl; for(int i =0;i&lt;r;i++) for(int j =0;j&lt;c;j++) { cin&gt;&gt;puzzle[i][j]; if(puzzle[i][j]!='*' &amp;&amp;(j!=0&amp;&amp;puzzle[i][j-1]=='*'|| j==0|| i!=0&amp;&amp;puzzle[i-1][j]=='*'|| i==0) ) mark[i][j]=++count; else if(puzzle[i][j]=='*') mark[i][j]=-1; else mark[i][j]=0; } run(); }} 获取棋盘的同时，获取起始格标记序号，另算上*(-1)所在位置一同记录在mark中。 输出时，遍历mark更加方便。","link":"/2019/11/17/crossword%20Answers/"},{"title":"文字-汉字概说","text":"&emsp;文字是记录语言的书写符号系统，是最重要的辅助性交流工具。 &emsp;殷商的甲骨文，距现在有3000多年的历史了，从形体和造字法来看，甲骨文已经是相当成熟的文字，可以想到，汉字产生的时间比这更早，西安半坡遗址距今五六千年，遗址出土的彩陶上有一些重复出现的有规则的简单符号。 &emsp;仓颉造字的说法是不正确的，文字是为了满足日益复杂的交际的需要，由人类共同创造出来的，文字一般起源于图画。萌芽的原始文字是不成系统的，分散的，如果仓颉确有其人，他可能是搜集和整理汉字的名人之一。 &emsp;表音和表意:每种语言都有一个语音系统和一个词汇系统，前者由音素，音节组成，后者由语素，词构成。这四个要素都可以用符号来记录，记录音素，音节的叫音素文字，音节文字，合称为表音文字；记录语素，词，叫，语素文字，表词文字，可合称为表意文字。 &emsp;表音文字用数目不多的符号表示一种语言里有限的音素或音节，作为标记词语声音的字母，一般来说，一定的音就用一定的字母表示，一定的字母表示一定的音。人们掌握了字母的发音和拼写规则，听到了一个词的发音就能写出来，看到一个词一般能读出它所表示的语音。表意文字则相反，不是用几十个字母来记录语素和词中的几十个音和几百个音节，用成千上万个符号去表示或区别不同的语素，词的意义。 &emsp;汉字是表意体系的文字，汉族历史悠久，地域辽阔，方言分歧很大，表意体系的汉字能在不同历史时期，不同方言之间很好地起到交际工具的作用，增强了民族的凝聚力。 &emsp;世界上文字多属于表音文字，表音文字助于抽象思维，表意助于形象思维。 &emsp;","link":"/2019/11/14/%E6%96%87%E5%AD%97-%E6%B1%89%E5%AD%97%E6%A6%82%E8%AF%B4/"},{"title":"11.3再谈迭代器","text":"&emsp;标准库所定义的迭代器不依赖于特定的容器。c++提供了另外三种迭代器。 插入迭代器：与容器绑定，实现在容器中插入元素的功能。 iostream迭代器：与输入或输出流绑定在一起，用于迭代遍历所关联的IO流。 反向迭代器：这类迭代器实现向后遍历，而不是向前遍历。所有容器类型都定义了自己的reverse_iterator类型，由rbegin和rend成员函数返回。 1.插入迭代器(迭代器适配器，容器参数-&gt;生成迭代器)：&emsp;back_inserter:创建使用push_back实现插入的迭代器。 &emsp;front_inserter,使用push_front实现插入//容器必须提供push_front操作 &emsp;inserter:使用inserter实现插入操作，除了关联容器外， +指向插入起始位置的迭代器。inserter函数总是在它的迭代器实参所标明的位置前面插入新元素。 12list&lt;int&gt;::iterator it = find(list.begin(),list.end(),42);replace_copy（ivec.begin(),ivec.end(),inserter(ilist,it),100,0); 2.iostream迭代器虽然iostream类型不是容器，但是提供了在iostream对象上使用迭代器。istream_iterator用于读取输入输出流，而ostream_iterator则用于写输出流。这些迭代器将它们所对应的流视为特定类型的元素序列。使用流迭代器,将流视为特定类型的元素的序列。 - - istream_iterator in(strm); 创建从输入流strm中读取T类型对象的istream_iterator对象 iostream_iterator in; isstream_iterator 对象的超出末端迭代器 ostream_iterator in(strm, delim);","link":"/2019/11/20/%E5%86%8D%E8%B0%88%E8%BF%AD%E4%BB%A3%E5%99%A8/"},{"title":"现代汉语概述-什么是现代汉语","text":"汉语是汉民族的语言，现代汉语是现代汉民族所使用的语言。 汉语作为一种语言，具有一切语言共同的属性：​ 1.结构上，一种音义结合的符号系统。 ​ 2.功能上，人们交际工具和思维工具，不分阶级一视同仁为汉族全体成员服务。 现代汉语有口语和书面语两种不同的形式：​ 口语：人们口头上应用的语言，一发即逝，不能流传久远，为了打破口语的时间于空间的限制，创造文字来记录语言，出现书面语。 ​ 书面语：用文字写下来的语言，在口语基础上形成，易于反复打磨，加工，使之更加严谨。 文学语言：指的是经过加工，规范的书面语。​ 书面语的产生为文学语言的形成提供了先决条件。文学语言比一般的书面语更加丰富，更具表现力。文学语言不仅包括文艺作品语言，也包括社会科学和自然科学著作的语言，也包括口头形式的科学报告，答记者问，诗歌朗诵。文学语言主要表现在书面上，也在口头上为民族语言的健康发展有很大的推动作用。","link":"/2019/11/13/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E6%A6%82%E8%BF%B0-%E4%BB%80%E4%B9%88%E6%98%AF%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD/"},{"title":"现代汉语概述-现代汉民族共同语","text":"&emsp;共同语是一个民族全体成员通用的语言。方言则是民族语言的地方分支。方言是共同语形成的基础，共同语形成后，两者可以同时存在。 &emsp;民族共同语是在一种方言的基础上形成的，这与经济、政治、文化分不开。这个民族共同语基础的方言叫基础方言。 &emsp;先秦时代存在着古代汉民的民族共同语。春秋时代，这种共同语称为“雅言”，汉代起称为“通语”，明代改称“官话”。到了现代，辛亥革命后，称为“国语”，新中国成立后称为“普通话”。 &emsp;汉民族的共同语的书面语在先秦时代产生，后来口语发展较快，书面语脱离了口语，通常称为文言或者文言文。到了唐宋时代，接近口语的书面语，白话产生了。唐宋以来用白话写作的各种文学作品很多，影响最大的是明清小说，《水浒传》，《西游记》等等，这些白话文学作品总的来看都是用北方方言写的，这些作品的流传，加速了 北方方言的推广。 &emsp;现代汉民族共同语是在北方方言的基础上形成的。形成过程中，北京话有着特殊的地位。唐代，北京地属幽州， 北方军事重镇；辽代，北京是五京之一；金元以来，北京成了我过政治，经济，文化的中心。因此，北京话的影响逐渐显著，地位日益重要。 &emsp;（公元1153年金迁都燕京，此后元明清，出了明初短时期建都金陵外，都建都北京，北京作为我国政治中心，前后历时八百多年） &emsp;五四运动后，我国资本主义发展，民族民主革命运动高涨，一方面，掀起了“白话文运动”，动摇了文言文的统治地位，另一方面开展了“国语运动”，又在口语方面增强了北京话的代表性，促使北京语音成为了全民族共同语的标准音。这两个运动互相推动，互相影响，就使书面语和口语接近起来，形成了现代汉民族的共同语。 &emsp;新中国建立以后，对民族共同语进一步统一和规范化有了更高的要求。后经各方研究，确定现代汉民族的共同语的三项标准涵义： &emsp;以北京语音为标准音，以北方话为基础方言，以典范的现代白话文著作为语法规范。 ​","link":"/2019/11/13/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E6%A6%82%E8%BF%B0-%E7%8E%B0%E4%BB%A3%E6%B1%89%E6%B0%91%E6%97%8F%E5%85%B1%E5%90%8C%E8%AF%AD/"},{"title":"短语的结构类型","text":"短语是意义上和语法上能搭配而没有句调的一组词，也叫词组 由短语内部，词与词之间的结构关系—&gt;短语的结构类型 基本类型-5个1.主谓短语：主语：陈述的对象，回答“谁”或“什么” 谓语：对主语所提出的对象加以陈述，说明主语“是什么”或”怎么样“ 举例： 1.他去 我喝 –动词作谓语 2.那花好看 心情苏畅 –形容词做谓语 3.今天星期三 明天国庆节 –名词做谓语 4.张三是学生 这是荷花 –动宾短语做谓语 2.动宾短语动语：动词性词语，表示某种行为或动作 宾语：名词性词语、动词、形容词性词语，受影响，支配的对象 举例： 1.吃米饭 增进感情 –动词性词语+名词性词语 2.看打球 值得考虑 –动词性词语+动词性词语 3.爱干净 以为很好 –动词性词语+形容词性词语 4.希望他来 听说他回来了 –动词性词语+主谓短语 3.偏正短语修饰语：修饰，限制，说明 中心语：被修饰，限制，说明 按照语法性质分为两大类： 1.定中短语：定语和名词性中心语组成，有时候用的表示 （他的）马 （江苏）人 （昨天的）事 （新）书 2.状中短语：由状语和谓词性中心语组成，有时用“地”表示 （马上）回来 （今天）回来 （花园里）谈 （这么）走 （一步一步地）走 4.中补短语中心语【动词，形容词】和补语【动词，形容词，副词，介词短语，数量短语】两个成分组成，补语附加在中心语后，其间是补充关系，有的补语之前有“得”。例如： 学（得好) 看了（一次） 成立了（十年） 走（到天涯海角） –动词+介词短语 5.联合短语各组成成分之间没有主次之分，各组成成分的词性一般相同，组成成分可以不止两项。 联合关系包括：并列，选择，递进 例： 今天和明天 柴米油盐 一个或者两个 你去还是我去 学习借鉴 讨论并通过 以上5种短语和句子和词的基本结构相同，叫做基本短语 其他类型连谓短语由不止一个谓词性成分连用，谓词性成分之间没有语音停顿，没有上述五种结构关系，也不用任何关联词语。例如： 上山采药（动-动）&nbsp;出去闲逛（动-动）&nbsp;看着心烦（动-形） 兼语短语特点： 1.只有两个部分，前一部分动宾短语，后一部分动词性成分或形容词性成分 2.动宾短语，其宾语在意念上一定是后一部分的主要动词的施事或后一部分中的形容词所说明的主题。","link":"/2020/01/11/%E7%9F%AD%E8%AF%AD%E7%9A%84%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B/"},{"title":"无重复字符的最长子串","text":"给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 输入: “pwwkew”输出: 3解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 Solution: &emsp;最直接的解决方式就是遍历所有字符串，并判断这个字符串是否有重复字符，复杂度应该为O(n^3) 123for(int i =0;i&lt;maxn;i++) for(int j=i+1;j&lt;maxn;j++) 判断字符串[i,j]是否有重复字符 &emsp;可以发现，如果说[i,j]有重复字符，那么没必要再判断[i,j+1]，也就是说，已经找到了以s[i]开头的字符串的最长子串长度。下一步应该查找s[i+1]开头的字串。break； &emsp;以滑动窗口来进一步简化： 12345比如字符串abbcddee初始窗口i=j=0;//加入a无重复，继续++ji=0,j=1 //如果加入b无重复，++j ans=j-s=2i=0,j=2 //如果加入b发现有重复，窗口右移,移除hash表中的s[i],i++i=1,j=2//以此类推 &emsp;对于字符串，最糟糕的情况下，每个字符将i和j访问两次。（添加j的时候访问一次，移除i的时候访问 一次）时间复杂度O(n)。 1234567891011121314151617181920class Solution {public: int lengthOfLongestSubstring(string s) { int i=0,j=0,n=s.size(); int ans=0; int hash[260]={0}; while(i&lt; n&amp;&amp;j&lt; n) { if(hash[s[j]]==0){ hash[s[j]]++; j++; ans = ans&gt;j-i? ans:j-i; } else{ hash[s[i++]]=0; } } return ans; }}; 进一步优化 比如acdbefbmn，当i为0，j为6时，可以直接令i=4，也就是跳过前面一段而不是一直++，那么hash表存储字符的位置即可。","link":"/2019/11/24/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"},{"title":"12.1类","text":"&nbsp;用类来定义自己的抽象数据类型，通过定义类型来对应所要解决的问题种的各种概念。 12.1类的定义和声明1.类就是定义了一个新的类型和一个新作用域 2.每个类可以没有成员，也可以定义多个成员，成员可以是数据，函数或类型别名。public,private,protected 3.构造函数用于给每个数据成员设置适当的初始设置，一般使用一个构造函数初始化列表来初始化对象的数据成员。 4.在类内部定义的函数默认为inline,在类的外部定义的函数必须指明它们是在类的作用域种，成员函数有一个附加的隐含实参，将函数绑定到调用函数的对象–当我们编写下面的函数时：trans.avg_price()，则在avg_price函数内部对Sales_item类成员的引用就是对trans成员的引用。 将关键字const加在形参表之后，就可以将成员函数声明为常量。 double avg_price() const const成员不能改变所操作的对象的数据成员。 5.类背后蕴含的基本思想是数据抽象和封装 &nbsp;程序的所有部分都可以访问带有public标号的成员，类型的数据抽象视图由其public成员定义，所有类的代码不可以访问带有private标号的成员，private封装了类型的实现细节。 一个访问标号可以出现的次数通常是没有限制的，每个访问标号指定了随后的成员定义的访问级别，直到遇到下一个访问标号或看到类定义体的右花括号为止。 可以在任意的访问标号出现之前定义类成员，在类的左花括号之后，第一个访问标号之前定义成员的访问级别，依赖类是如何定义的，struct–public和class–private。 6.数据抽象和封装的好处： 数据抽象和封装提供了两个重要优点： 避免类内部出现无意的、可能破坏对象状态的用户级错误 随时间推移可以根据需求改变或缺陷来完美类的实现却不用更改用户级代码 6.使用类型别名来简化类 1234567class Screen{public:typedef std::string::size_type index;private:std::string contents'index cursor;} 7.显示指定inline成员函数 &nbsp;在类内部定义的成员函数，将自动作为inline处理，也就是说，当它们被调用时，编译器将试图在同一行内扩展该函数，也可以显示地将成员函数声明为inline； 123456789101112131415161718class Screen{ public: typedef std::string::size_type index; char get()const {return contents[cursor];} inline char get(index ht,index wd) const; index get_cursor() const;};char Screen::get(index r,index c) const { index row = r*width; return contents[row+c]; }inline Screen::index Screen::get_cursor()const{ return cursor;}在类定义体内部指定一个成员为inline，作为其声明的一部分，或者，也可以在类定义外部的函数上指定inline。在声明和定义处指定inline都是合法的。在类的外部定义inline的一个好处是可以使得类比较容易阅读。像其他inline一样，inline成员函数的定义必须在调用该函数的每个源文件中可见。不在类定义的inline成员函数，其定义通常应放在由类定义的同一头文件中。 8.类声明与类定义 一旦定义了类，就知道类的所有成员以及存储该类的对象所需的存储空间。在一个给定的源文件中，一个类只能被定义一次，如果在多个文件中定义一个类，那么每个文件中的定义必须是相同的。 class Screen;//declaration of the screen class 这个声明，有时称为前向声明，在程序中引入了类类型screen，在声明之后，定义之前，类Screen是一个不完全类型，即已知Screen是一个类型，但是不知道包含哪些成员。 不完全类型只能以有限方式使用，不能定义该类型的对象，不完全类型只能用于定义指向该类型的指针以及引用，或者用于声明使用该类型作为形参类型或返回类型的函数 9.为类的成员使用声明 只有类定义体完成后才能定义类，因此类不能具有自身类型的数据成员，然而，只要类名一出现就可以认为该类已声明，因此，类的数据成员可以是指向自身类型的指针或引用。 12345class LinkScreen{Screen window;LinkScreen *next;LinkScreen *prev;}; 10.定义类类型的对象 定义了一个类类型之后，两种方式使用：类的名字直接用作类型名，or class struct 后面跟类的名字。 Sales_item item1; class Sales_item item1; 11.类的定义以分号结束 我们在第2.8节中指出，类的定义分号结素，分号必需的，因为在类的定义之后可以接 一个对象定义列表，定义必须以分号结束。 1class Sales_item{} accum,trans;","link":"/2020/01/13/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E7%B1%BB/"},{"title":"The dole queue","text":"In a serious attempt to downsize the dole queue, The New National Green Labour Rhinoceros Party has decided on the following strategy. Every day all dole applicants will be placed in a large circle, facing inwards. Someone is arbitrarily chosen as number 1, and the rest numbered counter-clockwise up to N. Staring from 1 and moving counter-clockwise, one labour official counts off k applicants, while another official starts from N and moves clockwise, counting m applicants, The two who are chosen are then sent off for retraining. If both officials pick the same person she is sent off to become a politician. Each official then starts counting again at the next available person and the process continues until no-one is left. Sample Input10 4 30 0 0Sample Output␣␣4␣␣8,␣␣9␣␣5,␣␣3␣␣1,␣␣2␣␣6,␣10,␣␣7 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;const int maxn = 25;int n,k,m,a[maxn];int go(int p,int step,int sum){ while(sum--){ do{ p = (p+step+n-1)%n +1;//限制在0-n取模,再加上1 }while(a[p]==0); } return p;}int main(){ while(cin&gt;&gt;n&gt;&gt;k&gt;&gt;m &amp;&amp; n) { int p1 = 0,p2 = n+1; int left = n; for(int i =1;i&lt;=n;i++) a[i] = i; while(left) { p1 = go(p1,1,k); p2 = go(p2,-1,m); printf(\"%3d\",p1); left--; if(p1!=p2) { left--; printf(\"%3d\",p2); } a[p1]=a[p2]=0; if(left)printf(\",\"); } printf(\"\\n\"); } return 0;} ·取模先转为[0,n)范围 再+1实现[1,n+1)范围","link":"/2019/11/27/The%20Dole%20Queue/"},{"title":"1.2监督学习","text":"1.2监督学习·在监督学习中，输入与输出所有可能的取值的集合称为输入，输出空间 ·输入和输出可以是有限元素的集合，也可以是整个欧式空间 ·每个具体的输入是一个实例，通常由特征向量表示。—&gt;特征空间 ·有时假设输入空间与特征空间为统一空间，不区分 ·在监督学习中，将输入输出看作是定义在输入空间与输出空间上随机变量的取值，输入，输出变量用大写字母表示X,Y，所取的值用小写字母表示，输入变量的取值为x,输出变量的取值为y。 &nbsp;&nbsp;&nbsp;&nbsp;$$x=(x^{(1)},x^{(2)},x^{(3)},…,x^{(i)},…,x^{(n)})^T$$ ·监督学习从训练数据集合中学习模型， 对测试数据进行预测，训练数据由输入与输出对组成。 $$T={(…,(x_i,y_i),…)}$$ ·输入输入对又称为样本点 ·回归问题；分类问题；标注问题 ·联合概率分布：X和Y具有联合概率分布的假设是监督学习关于数据的基本假设 ·假设空间：模型属于由输入空间到输出空间的映射的集合，这个集合就是假设空间。 ·概率模型：条件概率；非概率模型：决策函数 $$P(Y|X);Y_{n+1}=argmaxP(Y_{n+1}|x_{n+1})$$ $$f(X);Y_{n+1}=f(x_{n+1})$$","link":"/2020/01/21/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"}],"tags":[{"name":"数组","slug":"数组","link":"/tags/%E6%95%B0%E7%BB%84/"},{"name":"字符串","slug":"字符串","link":"/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"函数","slug":"函数","link":"/tags/%E5%87%BD%E6%95%B0/"},{"name":"c++","slug":"c","link":"/tags/c/"},{"name":"递归","slug":"递归","link":"/tags/%E9%80%92%E5%BD%92/"},{"name":"汉语言","slug":"汉语言","link":"/tags/%E6%B1%89%E8%AF%AD%E8%A8%80/"},{"name":"语法","slug":"语法","link":"/tags/%E8%AF%AD%E6%B3%95/"},{"name":"滑动窗口","slug":"滑动窗口","link":"/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"}],"categories":[{"name":"onlineJudge","slug":"onlineJudge","link":"/categories/onlineJudge/"},{"name":"统计学习方法","slug":"统计学习方法","link":"/categories/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"},{"name":"c++Primer","slug":"c-Primer","link":"/categories/c-Primer/"},{"name":"现代汉语","slug":"现代汉语","link":"/categories/%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD/"},{"name":"汉语言","slug":"汉语言","link":"/categories/%E6%B1%89%E8%AF%AD%E8%A8%80/"},{"name":"leetcodeMiddle","slug":"leetcodeMiddle","link":"/categories/leetcodeMiddle/"}]}